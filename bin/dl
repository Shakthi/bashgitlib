#!/bin/bash
import debuglog

debuglog_conditionally
cmdsource=$BGIT_BASEDIR/lib/vardata/dl
destdir=~/Downloads
pidfile=$BGIT_BASEDIR/lib/vardata/dl.pid 

function log()
{
 datenow=$(date "+%Y-%m-%d:%H:%M:%S" )
 echo $datenow $*
}


function isconnected()
{
 netstat -rn | grep -q ^default
}



function waitforconnection()
{
  local waittime=2
  
  while ! isconnected;
  do 
   sleep $waittime
   waittime=$(expr  $waittime '*' 2) 
   if [[ $waittime -gt 500 ]];then
	waittime=500
   fi
  done
}



function readconf()
{

  local file=$1
  local tag=^$2:
  cat $file|grep $tag|sed s/$tag//

}

function addtofile()
{
  local filename=$(mktemp /tmp/addtofile.XXXXXXX)
  cat /dev/stdin >$filename
  cat $filename
  rm $filename
  

}


function writeconf()
{

  local file=$1
  local value=$3
  local tag=^$2:
  local comment=$4


  local temp=$(mktemp /tmp/addtofile.XXXXXXX)
  cat $file 2>/dev/null |grep -v $tag >$temp
  echo -e "$2:$value">> $temp
  mv $temp $file


}




function redownload()
{
 # set -x
 while true ;do

 
 local URL=$1
 local basename=$2
 local limitrate=$3
 local lastsize=$(cat $basename 2>/dev/null |wc -c  );
 
 if [ -z $limitrate ];then
      limitrate=10000
 fi 
 echo limitrate:$limitrate URL  $URL '->' $basename
 curl  --limit-rate $limitrate  --speed-time 30 -C -  $URL -o $basename && return 0
 #curl   --speed-time 30 -C -  $URL -o $basename && return 0

 local nowsize=$(cat $basename 2>/dev/null |wc -c );
 if [ 0 == $nowsize ] ;then
  return 1
 fi

 if [ $lastsize == $nowsize ] ;then
  return 1
 fi
 
 done

}
monitor=no
reloadscipt=no
retransfer=no
nicedownloading=no
while getopts enmrlTd o
do      case "$o" in
        r)      reloadscipt=yes;;
	m)      monitor=yes;;
        T)      retransfer=yes;;
        n)      nicedownloading=yes;;
        T)      retransfer=yes;;
        l)      #list 
                for i in $cmdsource/*
                do
                 url=$(readconf $i url) 
                 dest=$(readconf $i dest)
                 echo " $url -> $dest"
                done
 		exit 0;;

        e)      exec $BGIT_BASEDIR/bbin/backedit $0;;
        d)       destdir=$(pwd);; 
        [?])    printf >&2 "Usage: $0 [-n] [-u] [-s] branch \n"
                exit 1;; 
        esac
done
shift `expr $OPTIND - 1`
function reloadscript()
{
 test -e $pidfile&& kill $(cat $pidfile)
}

if [[ $reloadscipt == yes ]];then
  reloadscript
fi


function idfordest()
{
 if ls $cmdsource/* 1>/dev/null 2>/dev/null ;then
  :
 else
  return 0
 fi


 for i in $cmdsource/*
 do
   url=$(readconf $i url) 
   dest=$(readconf $i dest)
   if [[ $dest == $1 ]];then
    echo $i
    return 0
   fi   
 done

 return 1

}



if [[ $retransfer == yes ]];then
  
 idnamename=$(idfordest $1 )||debuglog_die "Downloading destination $1 not found"
 dest=$(readconf $idnamename dest)
 newdest=$2
 if [ -d $newdest ];then
 	newdest=$newdest/$(basename $dest) 	
 fi
 cp $dest $newdest
 writeconf $idnamename dest $newdest
 reloadscript
 rm $dest
 exit 0
fi


if [[ $1 != "" ]];then
  idnamename=$cmdsource/$(echo $1|md5);
  writeconf $idnamename url $1 
  if [ ! -z $2 ];then
   basename=$2
  else
   basename=$( expr $1 : '.*/\(.*\)')
   basename=$(echo $basename|sed s/\?.*//)
  fi
  
   if [[ $nicedownloading == yes ]];then
    writeconf $idnamename limitrate 1000 
   fi
   outname=$destdir/$basename
   writeconf $idnamename dest $outname 
   reloadscript
  exit 0
fi 





if [[ $monitor == no ]];then
 exit 0
fi
log "waiting for network"
waitforconnection
log started

if ls $cmdsource/* 1>/dev/null 2>/dev/null ;then
 :
else
rm -f $cmdsource/.DS_Store
log exiting as no job
exit 0
fi
echo $$>$pidfile
for i in $cmdsource/*
do
   url=$(readconf $i url) 
   enabled=$(readconf $i enabled) 
   dest=$(readconf $i dest) 
   limitrate=$(readconf $i limitrate) 
   que=$(readconf $i que) 
 if [[ $enabled != no  ]] ;then
   if [[ $que != yes  ]] ;then
   redownload $url $dest $limitrate && rm $i & 
   fi
 fi 
done

trap "kill 0;" SIGINT SIGTERM EXIT
wait
 for i in $(ls -t $cmdsource );
 do
 
    i=$cmdsource/$i
    url=$(readconf $i url) 
    enabled=$(readconf $i enabled) 
    dest=$(readconf $i dest) 
    limitrate=$(readconf $i limitrate) 
    que=$(readconf $i que) 
  if [[ "$enabled" != no  ]] ;then
    if [[ "$que" == yes  ]] ;then
      redownload $url $dest $limitrate && rm $i
    fi
   fi 

 done

rm $pidfile
log finishing
debuglog_unconditionally
